正则
1.定义：
    专门用来处理字符串，设定一些验证字符串的验证的规则
    专门来匹配验证字符串的模型
2.作用：
    1.验证字符串是否跟正则相匹配  验证  正则.test()
    2.将字符串中匹配的内容拎出来  捕获  正则.exec() str.match()  str.replace() str.split()
3.正则的组成部分：元字符，修饰符 ，普通字符组成
元字符：表示有特殊含义的字符
\ 转义字符  \+普通字符 = 元字符
\d 0-9数字   \D与\d相反
\w A-Za-z0-9_  字母，数字，下划线组成 \W
\s 不可见的字符 例如空格，tab键等 \S 除不可见以为的其他字符
\b 单词的边界   \B
. 除了\n以外的其他字符
^ 以...开头
$ 以...结尾
| 或
[abc] 匹配字符a或b或c一个
[^abc] 除了a,b,c以外的其他字符
() 改变优先级，分组
?: 匹配不捕获
?= 正向预查
?! 负向预查

量词元字符
+ 1次到多次 {1,}
* 0到多次   {0,}
？0到1次    {0,1}
{n} 匹配n次
{n,m} 匹配n到m次
{n,} 匹配n到多次

修饰符
g(global) 全文查找
i(ignoreCase)忽视大小写
m(multiple) 多行查找

| 左右两边各是一个整体
()
- 分组作用
- 反向引用
- 分组捕获
[]
- []里只能表示一位数，不能表示两位数
- 这些特殊含义的元字符.+?*$^，在[]里代表字符本身的含义
- 可以用十六进制来表示特殊的字符 例如：/^[\u4e00-\u9fa5]+$/

正则定义的方式：
捕获，replace , match
正则案例
正向预查和负向预查







