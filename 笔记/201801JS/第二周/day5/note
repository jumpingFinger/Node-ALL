1.验证 正则.test()
2.捕获 正则.exec() str.match()  str.replace  str.split()
正则由元字符，普通字符，修饰符组成
\ 转义
\d 0-9之间的数字  \D
\w 字母（A-Za-z），数字(0-9),下划线 \W  \w\W
\s 不可见的字符 空格,制表符  \S    \s\S
\b 单词的边界 （常用的字符和不常用字符之间的逻辑部分&%#） \B
. 除了\n以外的其他字符
\n 换行
a|b a或b
[abc] 匹配a或b或c
[a-z] 匹配a-z之间的一个字符 [\u4e00-\u9fa5]
[^a-z] 匹配a-z以外的字符  ^在[]表示排除的意思
^ 以...开头
$ 以...结尾
() 改变优先级 分组作用 捕获
量词元字符
+ 1到多次
* 0到多次
？ 0~1次 可有可无
{n}匹配n次
{n,}匹配n到多次
{n,m}匹配n到m次

修饰符
g(global) 全文查找
m(multiline) 多行匹配
i(ignoreCase)忽视大小写


正则定义
var reg = // 直接量的方式
var reg = new RegExp("元字符+普通字符","修饰符");

正则的特征：
 贪婪与懒惰
 贪婪性：捕获时，能拿多决不拿少
 如何解决贪婪性？ 在量词后面加？非贪婪匹配 能拿少绝不拿到

 懒惰性:默认只会匹配一次，只要有匹配的字符，下面所有的字符都不再去看
 如何解决懒惰性？ 通过修饰符g来全文查找
 加上修饰符g会修改lastIndex属性值
 没有加g,lastIndex值为0
 查找字符串时，查找的位置就是根据lastIndex值的确定

特长：
- match 能一次性把匹配的内容都拿到  str.match(reg)
- exec 在于处理分组，能拿到分组里的内容 reg.exec(str)

必须掌握的三个方法的用法：
exec,match,replace

replace是字符串替换  str.replace()
str.replace(值类型或正则,数值类型或回调函数)




